# -*- coding: utf-8 -*-
"""sql_tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ULj7dMqhiamsBzZA1ponCsYfcx3OVIG_
"""

import json
import numpy as np
from sklearn.datasets import make_classification
from sklearn.tree import DecisionTreeClassifier

X, y = make_classification(
    n_samples=100, n_features=4, n_informative=2, n_redundant=0, random_state=42
)
tree = DecisionTreeClassifier(max_depth=4, random_state=42)
tree.fit(X, y)

def convert_tree_to_json(tree: DecisionTreeClassifier) -> str:
    tree_ = tree.tree_
    #features = [f"feature_{i}" for i in range(tree_.n_features)]
    def recurse(node):
        if tree_.feature[node] != -2:
            return {
                "feature_index": int(tree_.feature[node]),
                "threshold": round(float(tree_.threshold[node]), 4),
                "left": recurse(tree_.children_left[node]),
                "right": recurse(tree_.children_right[node])
            }
        else:
            class_index = int(np.argmax(tree_.value[node][0]))
            return {
                "class": class_index
            }
    tree_dict = recurse(0)
    tree_as_json = json.dumps(tree_dict, indent=2)

    return tree_as_json

def generate_sql_query(tree_as_json: str, features: list) -> str:
    tree = json.loads(tree_as_json)

    def build_case(node):
        if "class" in node:
            return str(node["class"])
        else:
            feature_name = features[node['feature_index']]
            threshold = node['threshold']
            left_case = build_case(node['left'])
            right_case = build_case(node['right'])
            return f"CASE WHEN {feature_name} > {threshold} THEN {right_case} ELSE {left_case} END"

    case_statement = build_case(tree)
    sql_query = f"SELECT {case_statement} AS class_label"
    return sql_query