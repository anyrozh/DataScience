# -*- coding: utf-8 -*-
"""NPS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y0d6icigNcrtvnLQ_0MtKgxrp_fP3IPw

Как видно, из формулы расчета NPS, эта метрика фокусируется только на самых положительных и самых отрицательных отзывах, не учитывая нейтральные мнения пользователей и находится в диапазоне от -100% (все критики) до 100% (все сторонники).
"""

from datetime import datetime
import pandas as pd
import matplotlib.pyplot as plt

class NPS:
    """
    A class used to collect and analyze customer feedback,
    including calculating the Net Promoter Score (NPS) and plotting it over time.
    """

    def __init__(self):
        """
        Initializes the NPS class with an empty dictionary for storing feedbacks.
        """
        self.feedbacks = {}

    def add_feedback(self, score: int, score_date: datetime = None):
        """
        Adds a feedback score for a specific datetime.

        Parameters:
            score (int): The customer's feedback score, must be between 0 and 10 inclusive.
            score_date (datetime, optional): The datetime of the feedback. Defaults to the current datetime if not provided.

        Raises:
            ValueError: If the score is not an integer or not within the range of 0 to 10.
        """
        # Проверка значения оценки
        if not isinstance(score, int) or not (0 <= score <= 10):
            raise ValueError("Score must be an integer between 0 and 10 inclusive.")

        if score_date is None:
            score_date = datetime.now()
        period = score_date.year * 100 + score_date.month   # YYYYMM

        # Добавляем оценку к соответствующему периоду
        if period not in self.feedbacks:
            self.feedbacks[period] = []
        self.feedbacks[period].append(score)

    def calculate_nps(self, period: int) -> float:
        """
        Calculates and returns the Net Promoter Score (NPS) for a given period.
        """
        scores = self.feedbacks.get(period, [])
        if len(scores) == 0:
            return 0.0

        total = len(scores)
        promoters = sum(1 for s in scores if s >= 9)
        detractors = sum(1 for s in scores if s <= 6)
        nps = (promoters - detractors) / total * 100
        return round(nps, 2)

    def plot_trend(self, show_plot: bool = True) -> pd.DataFrame:
        """
        Plots NPS for each period stored in the feedbacks dictionary.

        Returns:
            pd.DataFrame: columns: 'period', 'nps'
        """
        if not self.feedbacks:
            return pd.DataFrame(columns=['period', 'nps'])

        # Считаем NPS для всех имеющихся периодов
        periods = sorted(self.feedbacks.keys())
        nps_list = [self.calculate_nps(p) for p in periods]
        df = pd.DataFrame({'period': periods, 'nps': nps_list}).astype({'period': 'int32', 'nps': 'float32'})

        if show_plot:
            plt.figure(figsize=(8,4))
            plt.plot(df['period'].astype(str), df['nps'], marker='o')
            plt.title('NPS Trend')
            plt.xlabel('Period')
            plt.ylabel('NPS')
            plt.grid(True)
            plt.tight_layout()
            plt.show()

        return df

import random
nps = NPS()

# random 10 feedbacks
for i in range(10):
    random_score = random.randint(0, 10)
    nps.add_feedback(random_score)

print(f'Feedbacks: {nps .feedbacks}')

# >>Feedbacks: {202406: [4, 5, 7, 7, 10, 4, 9, 4, 4, 10]}